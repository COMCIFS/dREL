# pytest will run this file automatically.
# Test the autogenerated dREL parser against various dREL
# fragments.

import pytest
from lark import Lark
from CifFile import CifDic

# Constants
grammar_file = "lark_grammar.ebnf"
dic_file = "/home/jrh/COMCIFS/cif_core/cif_core.dic"

frag_collection = {}

frag_collection["assign"] = """a = 0"""+"\n"
frag_collection["brackets"] = """With c as cell
 
    _cell.reciprocal_angle_alpha = Acosd(
    (Cosd(c.angle_beta)*Cosd(c.angle_gamma)-Cosd(c.angle_alpha))/(Sind(c.angle_beta)*Sind(c.angle_gamma)))""" + "\n"

frag_collection["matrix"] = """
          _diffrn_reflns_transf_matrix.TIJ =  [a,b,c]
"""
frag_collection["newlines"] = """
           f  =  (c[0]
                        + c[3])
                       
"""
frag_collection["call_suite"] = """
   If(setting == 'triclinic') {
      If( Abs(a-b)<d || Abs(a-c)<d || Abs(b-c)<d )          Alert('B', warn_len)
      If( Abs(alp-90)<d || Abs(bet-90)<d || Abs(gam-90)<d ) Alert('B', warn_ang)
      }
"""
# 
@pytest.fixture
def lark_grammar(request,scope="module"):
    grammar_file = getattr(request.module,"grammar_file")
    grammar = open(grammar_file).read()
    parser = Lark(grammar,start="input",parser="lalr",lexer="contextual")
    return parser

@pytest.fixture
def load_cifdic(request,scope="module"):
    cifdic = getattr(request.module,"dic_file")
    p = CifDic(cifdic,do_minimum=True)
    has_meth = list([n for n in p.keys() if '_method.expression' in p[n]])
    has_meth.sort()
    return [(n,p[n]['_method.expression']) for n in has_meth]

def select_a_phrase(name,parser):
    phrase = frag_collection[name]
    print("==== %s ====" % name)
    print(phrase)
    print("Tokens:")
    tokens = parser.lex(phrase)
    for t in tokens:
        print(repr(t))
    tree = parser.parse(phrase,debug=True)
    print(tree.pretty())

def test_newlines(lark_grammar):
    select_a_phrase("newlines",lark_grammar)

def test_matrix(lark_grammar):
    select_a_phrase("matrix",lark_grammar)

def test_brackets(lark_grammar):
    select_a_phrase("brackets",lark_grammar)

def test_assign(lark_grammar):
    select_a_phrase("assign",lark_grammar)

def test_small_stmt(lark_grammar):
    """Test that a small statement after an IF statement is
    considered to be a suite"""
    select_a_phrase("call_suite",lark_grammar)
    
def test_dic_entries(load_cifdic,lark_grammar):
    for mn,(name,one_m) in enumerate(load_cifdic):
        for n,om in enumerate(one_m):   #multiple methods possible
            print("=== %s(%d) ===" % (name,mn))
            print(om)
            tokens = lark_grammar.lex(om+"\n")
            for t in tokens:
                print(repr(t))
            tree = lark_grammar.parse(om+"\n")
            print(tree.pretty())
        
